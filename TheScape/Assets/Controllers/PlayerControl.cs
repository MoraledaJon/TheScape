//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Controllers/PlayerControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControl : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControl"",
    ""maps"": [
        {
            ""name"": ""PlayerHACK"",
            ""id"": ""511cb877-e9e6-4fbf-b29f-16d169d4bd0b"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""09e8772f-540a-4607-ae5d-9dc72d5da3f3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""Value"",
                    ""id"": ""c292cd48-7c06-404a-8ae5-a66ac8edf6c3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""2c112cf8-55d8-449c-a768-1dd96b34cb8c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Enter"",
                    ""type"": ""Button"",
                    ""id"": ""6ddbd26e-9cec-4c64-b35b-e7b23bd5ba32"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AutoShoot"",
                    ""type"": ""Button"",
                    ""id"": ""cc8e7fdb-abfa-4527-858e-f36614047e06"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""9f50d29e-38ce-4b56-bf70-8d3ba169d942"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reset"",
                    ""type"": ""Button"",
                    ""id"": ""cfe86925-222e-4816-a382-2e89cca05385"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""61bbd6fa-6d8b-4982-9b59-e80849ab0687"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""bb85966b-27af-4678-9d6c-b53b14abbfcd"",
                    ""path"": ""Dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""8018de29-d72c-4b2c-a204-62d4d2fe074e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4fb6b66e-718a-4921-8be3-c34eb0f4f19b"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c94e86d7-b1fd-4223-a90c-7aef6be949eb"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""0544b20b-ce8a-4b89-96b5-8aaa2c8171f9"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""ab1b4e1e-5597-43b9-baaa-65f7b8357a8d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""77bbcb09-04e1-4a85-b593-bd66e459c2a7"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""bd43de9a-0bcc-46da-861f-1b20495ce724"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""756a8f23-8344-43f4-bd12-32ab329d3514"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""914515a4-e717-407f-abd6-346cd09877e9"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Gamepad"",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dcee1dbd-f660-479a-b74c-17cf6973a484"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fa6ad8b0-efc8-45a9-9da0-1d525308b93a"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a4af4cb3-679a-4c68-ab97-9cd5cca5f79f"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Enter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7b760d93-3345-407d-8565-730a08dfe529"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Enter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f69ad47a-78fd-4683-9441-e045663ede3f"",
                    ""path"": ""<Gamepad>/leftTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AutoShoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eef59532-fd38-45fd-a217-0fa85f36a60e"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""649d772b-083a-47f5-a043-b17ad6ca123e"",
                    ""path"": ""<Gamepad>/select"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reset"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""CameraController"",
            ""id"": ""fac79f69-dae4-439a-8dd3-a6d41173f4f9"",
            ""actions"": [
                {
                    ""name"": ""ChangeCamera"",
                    ""type"": ""Button"",
                    ""id"": ""ad930f94-463a-4bd6-b473-e37bcc817d93"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""faee1811-79e6-446b-ad22-91df56ede25b"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""38d5c032-654b-4b97-bc71-64227177e0ac"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeCamera"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerHACK
        m_PlayerHACK = asset.FindActionMap("PlayerHACK", throwIfNotFound: true);
        m_PlayerHACK_Move = m_PlayerHACK.FindAction("Move", throwIfNotFound: true);
        m_PlayerHACK_Aim = m_PlayerHACK.FindAction("Aim", throwIfNotFound: true);
        m_PlayerHACK_Shoot = m_PlayerHACK.FindAction("Shoot", throwIfNotFound: true);
        m_PlayerHACK_Enter = m_PlayerHACK.FindAction("Enter", throwIfNotFound: true);
        m_PlayerHACK_AutoShoot = m_PlayerHACK.FindAction("AutoShoot", throwIfNotFound: true);
        m_PlayerHACK_Jump = m_PlayerHACK.FindAction("Jump", throwIfNotFound: true);
        m_PlayerHACK_Reset = m_PlayerHACK.FindAction("Reset", throwIfNotFound: true);
        // CameraController
        m_CameraController = asset.FindActionMap("CameraController", throwIfNotFound: true);
        m_CameraController_ChangeCamera = m_CameraController.FindAction("ChangeCamera", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerHACK
    private readonly InputActionMap m_PlayerHACK;
    private IPlayerHACKActions m_PlayerHACKActionsCallbackInterface;
    private readonly InputAction m_PlayerHACK_Move;
    private readonly InputAction m_PlayerHACK_Aim;
    private readonly InputAction m_PlayerHACK_Shoot;
    private readonly InputAction m_PlayerHACK_Enter;
    private readonly InputAction m_PlayerHACK_AutoShoot;
    private readonly InputAction m_PlayerHACK_Jump;
    private readonly InputAction m_PlayerHACK_Reset;
    public struct PlayerHACKActions
    {
        private @PlayerControl m_Wrapper;
        public PlayerHACKActions(@PlayerControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_PlayerHACK_Move;
        public InputAction @Aim => m_Wrapper.m_PlayerHACK_Aim;
        public InputAction @Shoot => m_Wrapper.m_PlayerHACK_Shoot;
        public InputAction @Enter => m_Wrapper.m_PlayerHACK_Enter;
        public InputAction @AutoShoot => m_Wrapper.m_PlayerHACK_AutoShoot;
        public InputAction @Jump => m_Wrapper.m_PlayerHACK_Jump;
        public InputAction @Reset => m_Wrapper.m_PlayerHACK_Reset;
        public InputActionMap Get() { return m_Wrapper.m_PlayerHACK; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerHACKActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerHACKActions instance)
        {
            if (m_Wrapper.m_PlayerHACKActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_PlayerHACKActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerHACKActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerHACKActionsCallbackInterface.OnMove;
                @Aim.started -= m_Wrapper.m_PlayerHACKActionsCallbackInterface.OnAim;
                @Aim.performed -= m_Wrapper.m_PlayerHACKActionsCallbackInterface.OnAim;
                @Aim.canceled -= m_Wrapper.m_PlayerHACKActionsCallbackInterface.OnAim;
                @Shoot.started -= m_Wrapper.m_PlayerHACKActionsCallbackInterface.OnShoot;
                @Shoot.performed -= m_Wrapper.m_PlayerHACKActionsCallbackInterface.OnShoot;
                @Shoot.canceled -= m_Wrapper.m_PlayerHACKActionsCallbackInterface.OnShoot;
                @Enter.started -= m_Wrapper.m_PlayerHACKActionsCallbackInterface.OnEnter;
                @Enter.performed -= m_Wrapper.m_PlayerHACKActionsCallbackInterface.OnEnter;
                @Enter.canceled -= m_Wrapper.m_PlayerHACKActionsCallbackInterface.OnEnter;
                @AutoShoot.started -= m_Wrapper.m_PlayerHACKActionsCallbackInterface.OnAutoShoot;
                @AutoShoot.performed -= m_Wrapper.m_PlayerHACKActionsCallbackInterface.OnAutoShoot;
                @AutoShoot.canceled -= m_Wrapper.m_PlayerHACKActionsCallbackInterface.OnAutoShoot;
                @Jump.started -= m_Wrapper.m_PlayerHACKActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_PlayerHACKActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_PlayerHACKActionsCallbackInterface.OnJump;
                @Reset.started -= m_Wrapper.m_PlayerHACKActionsCallbackInterface.OnReset;
                @Reset.performed -= m_Wrapper.m_PlayerHACKActionsCallbackInterface.OnReset;
                @Reset.canceled -= m_Wrapper.m_PlayerHACKActionsCallbackInterface.OnReset;
            }
            m_Wrapper.m_PlayerHACKActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Aim.started += instance.OnAim;
                @Aim.performed += instance.OnAim;
                @Aim.canceled += instance.OnAim;
                @Shoot.started += instance.OnShoot;
                @Shoot.performed += instance.OnShoot;
                @Shoot.canceled += instance.OnShoot;
                @Enter.started += instance.OnEnter;
                @Enter.performed += instance.OnEnter;
                @Enter.canceled += instance.OnEnter;
                @AutoShoot.started += instance.OnAutoShoot;
                @AutoShoot.performed += instance.OnAutoShoot;
                @AutoShoot.canceled += instance.OnAutoShoot;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Reset.started += instance.OnReset;
                @Reset.performed += instance.OnReset;
                @Reset.canceled += instance.OnReset;
            }
        }
    }
    public PlayerHACKActions @PlayerHACK => new PlayerHACKActions(this);

    // CameraController
    private readonly InputActionMap m_CameraController;
    private ICameraControllerActions m_CameraControllerActionsCallbackInterface;
    private readonly InputAction m_CameraController_ChangeCamera;
    public struct CameraControllerActions
    {
        private @PlayerControl m_Wrapper;
        public CameraControllerActions(@PlayerControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @ChangeCamera => m_Wrapper.m_CameraController_ChangeCamera;
        public InputActionMap Get() { return m_Wrapper.m_CameraController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraControllerActions set) { return set.Get(); }
        public void SetCallbacks(ICameraControllerActions instance)
        {
            if (m_Wrapper.m_CameraControllerActionsCallbackInterface != null)
            {
                @ChangeCamera.started -= m_Wrapper.m_CameraControllerActionsCallbackInterface.OnChangeCamera;
                @ChangeCamera.performed -= m_Wrapper.m_CameraControllerActionsCallbackInterface.OnChangeCamera;
                @ChangeCamera.canceled -= m_Wrapper.m_CameraControllerActionsCallbackInterface.OnChangeCamera;
            }
            m_Wrapper.m_CameraControllerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ChangeCamera.started += instance.OnChangeCamera;
                @ChangeCamera.performed += instance.OnChangeCamera;
                @ChangeCamera.canceled += instance.OnChangeCamera;
            }
        }
    }
    public CameraControllerActions @CameraController => new CameraControllerActions(this);
    public interface IPlayerHACKActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnAim(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnEnter(InputAction.CallbackContext context);
        void OnAutoShoot(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnReset(InputAction.CallbackContext context);
    }
    public interface ICameraControllerActions
    {
        void OnChangeCamera(InputAction.CallbackContext context);
    }
}
